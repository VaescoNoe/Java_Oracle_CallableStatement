==============FUNCTION

CREATE OR REPLACE FUNCTION "HR"."GET_EMPLOYEES_SALARY"(p_emp_id IN employees.employee_id%TYPE)
RETURN employees.salary%TYPE
AS
	v_monthly_salary employees.salary%TYPE;
BEGIN
--Ejecuta en select para obtener el salario actual para
--el id_empleado proporcionado

SELECT NVL(salary,-999)
INTO v_monthly_salary
FROM employees
WHERE
	employee_id=p_emp_id;
	return v_monthly_salary;
END;
/


=============PROCEDURE

	CREATE OR REPLACE PROCEDURE "HR"."SET_EMPLOYEE_SALARY"
										(p_emp_id IN employees.employee_id%TYPE
										,p_factor IN NUMBER)
	AS
		v_monthly_salary employees.salary%TYPE;
	BEGIN
	
	--Obtiene el sueldo actual del id_empleado proporcionado
	
	SELECT NVL(salary, -999)
	INTO v_monthly_salary
	FROM employees
	WHERE employee_id = p_emp_id;
	
	IF(v_monthly_salary!=-999) THEN
	
	UPDATE employees 
	SET salary = salary * p_factor
	WHERE employee_id = p_emp_id; 
	COMMIT;
	DBMS_OUTPUT.PUT_LINE('TERMINO DEL PROGRAMA, Salary:'||v_monthly_salary);
	
	END IF;
	END;
	/

==============PAQUETE

CREATE OR REPLACE PACKAGE "REF_CURSOR_PACKAGE"
AS
	TYPE t_ref_cursor IS REF CURSOR;
	FUNCTION get_dept_ref_cursor(p_dept_id INTEGER) 
	RETURN t_ref_cursor;
	END;
/

CREATE OR REPLACE PACKAGE BODY ref_cursor_package
AS
 FUNCTION get_dept_ref_cursor(p_dept_id INTEGER)
 RETURN t_ref_cursor IS
 dept_ref_cursor t_ref_cursor;
 BEGIN
 OPEN dept_ref_cursor FOR
 SELECT department_id,department_name,location_id
 FROM departments
 WHERE department_id>p_dept_id
 ORDER BY department_id;
 
 RETURN dept_ref_cursor;
 END get_dept_ref_cursor;
 END ref_cursor_package;
 /
 

















